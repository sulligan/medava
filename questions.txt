If OOP languages are a subset of Imperative languages, it seems strange to me to leave out the functionality of standalone functions. To some degree, this exclusion conceptually simplifies things: If everything is a class, that lends a predictability to the structure of our code. However, I personally found the idea of a main function being attached to a class to be a bit obtuse. Are there other significant examples of coding problems in which a pure OOP approach leads to an unintuitive answer? 

I would assert that OOP's biggest strength is also its biggest weakness - That is, it's connection to how we think about objects in real life. Using the assignment as an example: If we create a hospital class, a pharmacy class, and a transporter class which ferries goods between them, how do we determine which class our methods belong to? Does the pharmacy load medicine to the transporter, or do we concieve of the transporter as loading medicine from the pharmacy? This problem only compounds as we add more interacting objects, which raises the question: How do we determine which methods belong to an object?

I found myself interested in the different use cases of Reflection and interfaces. Obviously, interfaces are the more efficient tool for our assignment, but that leaves me wondering when it is best to employ Reflection. Should Reflection be thought of as a last-case solution for when none of our other tools are working?